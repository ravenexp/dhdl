use ast::*;

#[LALR]
#[recursive_ascent]
grammar;

pub ModuleDecl: ModuleDecl = {
    "module" <name: ident> ";"
    <entities: EntityDecls>
    "end" "module" <endname: ident> ";"
        => ModuleDecl { name: name, entities: entities, endname: endname }
};

EntityDecls: Vec<EntityDecl> = { EntityDecl* };

EntityDecl: EntityDecl = {
    "entity" <name: ident> <ports: (PortDecls)?> ";"
    "end" "entity" <endname: ident> ";"
        => EntityDecl { name: name, ports: ports, endname: endname }
};

PortDecls: Vec<PortDecl> = { "(" <(<PortDecl> ";")+> ")" };

PortDecl: PortDecl = {
    <name: ident> ":" <dir: (direction)?> <class: ident>
        => PortDecl { name: name, dir: dir, class: class }
};

WireDecls: Vec<WireDecl> = { WireDecl* };

WireDecl: WireDecl = {
    <name: ident> ":" <class: ident> ";"
        => WireDecl { name: name, class: class }
};

// Terminals

direction: Direction = {
    "in"  => Direction::In,
    "out" => Direction::Out
};

ident: Ident = {
    r"[a-zA-Z][a-zA-Z0-9]*" => Ident(String::from(<>))
};

number: Number = {
    r"[0-9]+" => Number(String::from(<>))
};
