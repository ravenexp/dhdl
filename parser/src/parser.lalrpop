use ast::*;

#[recursive_ascent]
grammar;

// Grammar constructs

pub ModuleDecl: ModuleDecl = {
    "module" <name: Ident> ";"
    <components: ComponentDecls>
    <entities: EntityDecls>
    "end" "module" <endname: Ident> ";"
        => ModuleDecl {
            name: name,
            components: components,
            entities: entities,
            endname: endname
        }
};

EntityDecls: Vec<EntityDecl> = { EntityDecl* };

EntityDecl: EntityDecl = {
    "entity" <name: Ident>
        <generics: GenericDecls?>
        <ports: PortDecls?>
    ";"
    <wires: WireDecls>
    <insts: EntityInsts>
    "end" "entity" <endname: Ident> ";"
        => EntityDecl {
            name: name,
            generics: generics,
            ports: ports,
            wires: wires,
            insts: insts,
            endname: endname
        }
};

ComponentDecls: Vec<ComponentDecl> = { ComponentDecl* };

ComponentDecl: ComponentDecl = {
    "component" <name: Ident>
        <generics: GenericDecls?>
        <ports: PortDecls?>
    ";"
    <attributes: AttributeDefs>
    "end" "component" <endname: Ident> ";"
        => ComponentDecl {
            name: name,
            generics: generics,
            ports: ports,
            attributes: attributes,
            endname: endname
        }
};

GenericDecls: Vec<GenericDecl> = { "generic" "{" <GenericDecl+> "}" };

GenericDecl: GenericDecl = {
    <name: Ident> ":" <gentype: Ident> <defval: GenericDeclValue?> ";"
        => GenericDecl { name: name, gentype: gentype, defval: defval }
};

GenericDeclValue: ConstExpr = {
    ":=" <ConstExpr>
};

PortDecls: Vec<PortDecl> = { "port" "{" <PortDecl+> "}" };

PortDecl: PortDecl = {
    <name: Ident> ":" <dir: portdir> <class: Ident> ";"
        => PortDecl { name: name, dir: dir, class: class }
};

AttributeDefs: Vec<AttributeDef> = { AttributeDef* };

AttributeDef: AttributeDef = {
    "attribute" <name: Ident> ":" <typename: Ident> ":=" <value: ConstExpr> ";"
        => AttributeDef { name: name, typename: typename, value: value }
};

WireDecls: Vec<WireDecl> = { WireDecl* };

WireDecl: WireDecl = {
    "wire" <name: Ident> ":" <class: Ident> ";"
        => WireDecl { name: name, class: class }
};

EntityInsts: Vec<EntityInst> = { EntityInst* };

EntityInst: EntityInst = {
    EntityInstShort => EntityInst::Short(<>),
    EntityInstLong => EntityInst::Long(<>)
};

EntityInstShort: EntityInstShort = {
    "put" <name: Ident> <ports: InstPortList> ":"
     <entity: Ident> <generics: InstGenericList?> ";"
        => EntityInstShort {
            name: name,
            ports: ports,
            entity: entity,
            generics: generics
        }
};

InstPortList: CommaList<Ident> = { "(" < CommaList<Ident> > ")" };
InstGenericList: CommaList<ConstExpr> = { "(" < CommaList<ConstExpr> > ")" };

EntityInstLong: EntityInstLong = {
    "put" <name: Ident> ":" <entity: Ident>
        <generics: GenericAssigns?>
        <ports: PortAssigns?>
    ";"
        => EntityInstLong {
            name: name,
            entity: entity,
            generics: generics,
            ports: ports
        }
};

GenericAssigns: Vec<GenericAssign> = { "generic" "{" <GenericAssign+> "}" };

GenericAssign: GenericAssign = {
    <generic: Ident> ":=" <value: ConstExpr> ";"
        => GenericAssign { generic: generic, value: value }
};

PortAssigns: Vec<PortAssign> = { "port" "{" <PortAssign+> "}" };

PortAssign: PortAssign = {
    <port: Ident> <dir: portassign> <wire: Ident> ";"
        => PortAssign { port: port, dir: dir, wire: wire }
};

// Macros

CommaList<T>: CommaList<T> = {
    <head: (<T> ",")*> <tail: T>
        => CommaList { head: head, tail: tail }
};

// Expressions

ConstExpr: ConstExpr = {
    Ident  => ConstExpr::Ident(<>),
    Number => ConstExpr::Number(<>),
    String => ConstExpr::String(<>)
};

// Terminals

portdir: Direction = {
    ()    => Direction::None,
    "in"  => Direction::In,
    "out" => Direction::Out
};

portassign: Direction = {
    "==" => Direction::None,
    "<=" => Direction::In,
    "=>" => Direction::Out
};

Ident: Ident = {
    r"[a-zA-Z][a-zA-Z0-9]*" => Ident(String::from(<>))
};

Number: Number = {
    r"[0-9]+" => Number(String::from(<>))
};

String: String = {
    r#""[^"]*""# => String::from(<>)
};
