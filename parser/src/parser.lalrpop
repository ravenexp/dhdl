use ast::*;

#[LALR]
#[recursive_ascent]
grammar;

pub ModuleDecl: ModuleDecl = {
    "module" <name: ident> ";"
    <components: ComponentDecls>
    <entities: EntityDecls>
    "end" "module" <endname: ident> ";"
        => ModuleDecl {
            name: name,
            components: components,
            entities: entities,
            endname: endname
        }
};

EntityDecls: Vec<EntityDecl> = { EntityDecl* };

EntityDecl: EntityDecl = {
    "entity" <name: ident>
        <generics: GenericDecls?>
        <ports: PortDecls?>
    ";"
    <wires: WireDecls>
    <insts: EntityInsts>
    "end" "entity" <endname: ident> ";"
        => EntityDecl {
            name: name,
            generics: generics,
            ports: ports,
            wires: wires,
            insts: insts,
            endname: endname
        }
};

ComponentDecls: Vec<ComponentDecl> = { ComponentDecl* };

ComponentDecl: ComponentDecl = {
    "component" <name: ident>
        <generics: GenericDecls?>
        <ports: PortDecls?>
    ";"
    <attributes: AttributeDefs>
    "end" "component" <endname: ident> ";"
        => ComponentDecl {
            name: name,
            generics: generics,
            ports: ports,
            attributes: attributes,
            endname: endname
        }
};

GenericDecls: Vec<GenericDecl> = { "generic" "{" <GenericDecl+> "}" };

GenericDecl: GenericDecl = {
    <name: ident> ":" <gentype: ident> <defval: GenericDeclValue?> ";"
        => GenericDecl { name: name, gentype: gentype, defval: defval }
};

GenericDeclValue: ConstExpr = {
    ":=" <ConstExpr>
};

PortDecls: Vec<PortDecl> = { "port" "{" <PortDecl+> "}" };

PortDecl: PortDecl = {
    <name: ident> ":" <dir: portdir> <class: ident> ";"
        => PortDecl { name: name, dir: dir, class: class }
};

AttributeDefs: Vec<AttributeDef> = { AttributeDef* };

AttributeDef: AttributeDef = {
    "attribute" <name: ident> ":" <typename: ident> ":=" <value: ConstExpr> ";"
        => AttributeDef { name: name, typename: typename, value: value }
};

WireDecls: Vec<WireDecl> = { WireDecl* };

WireDecl: WireDecl = {
    "wire" <name: ident> ":" <class: ident> ";"
        => WireDecl { name: name, class: class }
};

EntityInsts: Vec<EntityInst> = { EntityInst* };

EntityInst: EntityInst = {
    "put" <name: ident> ":" <entity: ident>
        <generics: GenericAssigns?>
        <ports: PortAssigns?>
    ";"
        => EntityInst {
            name: name,
            entity: entity,
            generics: generics,
            ports: ports
        }
};

GenericAssigns: Vec<GenericAssign> = { "generic" "{" <GenericAssign+> "}" };

GenericAssign: GenericAssign = {
    <generic: ident> ":=" <value: ConstExpr> ";"
        => GenericAssign { generic: generic, value: value }
};

PortAssigns: Vec<PortAssign> = { "port" "{" <PortAssign+> "}" };

PortAssign: PortAssign = {
    <port: ident> <dir: portassign> <wire: ident> ";"
        => PortAssign { port: port, dir: dir, wire: wire }
};

ConstExpr: ConstExpr = {
    ident  => ConstExpr::Ident(<>),
    number => ConstExpr::Number(<>),
    string => ConstExpr::String(<>)
};

// Terminals

portdir: Direction = {
    ()    => Direction::None,
    "in"  => Direction::In,
    "out" => Direction::Out
};

portassign: Direction = {
    "==" => Direction::None,
    "<=" => Direction::In,
    "=>" => Direction::Out
};

ident: Ident = {
    r"[a-zA-Z][a-zA-Z0-9]*" => Ident(String::from(<>))
};

number: Number = {
    r"[0-9]+" => Number(String::from(<>))
};

string: String = {
    r#""[^"]*""# => String::from(<>)
};
