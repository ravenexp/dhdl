use ast::*;

#[LALR]
#[recursive_ascent]
grammar;

pub ModuleDecl: ModuleDecl = {
    "module" <name: ident> ";"
    <entities: EntityDecls>
    "end" "module" <endname: ident> ";"
        => ModuleDecl { name: name, entities: entities, endname: endname }
};

EntityDecls: Vec<EntityDecl> = { EntityDecl* };

EntityDecl: EntityDecl = {
    "entity" <name: ident>
        <generics: (GenericDecls)?>
        <ports: (PortDecls)?>
    ";"
    <wires: WireDecls>
    <insts: EntityInsts>
    "end" "entity" <endname: ident> ";"
        => EntityDecl {
            name: name,
            generics: generics,
            ports: ports,
            wires: wires,
            insts: insts,
            endname: endname
        }
};

GenericDecls: Vec<GenericDecl> = { "<" <GenericDecl+> ">" };

GenericDecl: GenericDecl = {
    <name: ident> ":" <gentype: ident> ";"
        => GenericDecl { name: name, gentype: gentype }
};

PortDecls: Vec<PortDecl> = { "(" <PortDecl+> ")" };

PortDecl: PortDecl = {
    <name: ident> ":" <dir: portdir> <class: ident> ";"
        => PortDecl { name: name, dir: dir, class: class }
};

WireDecls: Vec<WireDecl> = { WireDecl* };

WireDecl: WireDecl = {
    "wire" <name: ident> ":" <class: ident> ";"
        => WireDecl { name: name, class: class }
};

EntityInsts: Vec<EntityInst> = { EntityInst* };

EntityInst: EntityInst = {
    "put" <name: ident> ":" <entity: ident>
        <generics: (GenericAssigns)?>
        <ports: (PortAssigns)?>
    ";"
        => EntityInst {
            name: name,
            entity: entity,
            generics: generics,
            ports: ports
        }
};

GenericAssigns: Vec<GenericAssign> = { "<" <GenericAssign+> ">" };

GenericAssign: GenericAssign = {
    <generic: ident> ":=" <value: GenExpr> ";"
        => GenericAssign { generic: generic, value: value }
};

PortAssigns: Vec<PortAssign> = { "(" <PortAssign+> ")" };

PortAssign: PortAssign = {
    <port: ident> <dir: portassign> <wire: ident> ";"
        => PortAssign { port: port, dir: dir, wire: wire }
};

GenExpr: GenExpr = {
    number => GenExpr::Number(<>),
    string => GenExpr::String(<>)
};

// Terminals

portdir: Direction = {
    ()    => Direction::None,
    "in"  => Direction::In,
    "out" => Direction::Out
};

portassign: Direction = {
    "==" => Direction::None,
    "<=" => Direction::In,
    "=>" => Direction::Out
};

ident: Ident = {
    r"[a-zA-Z][a-zA-Z0-9]*" => Ident(String::from(<>))
};

number: Number = {
    r"[0-9]+" => Number(String::from(<>))
};

string: String = {
    r"'[^']*'" => String::from(<>)
};
